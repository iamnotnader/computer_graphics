// code adapted from http://www.opengl.org/resources/libraries/glut/ 
// changed the make box function to include the texure
static void drawBrickBox(GLfloat size, GLenum type)
{
  static GLfloat n[6][3] =
  {
    {-1.0, 0.0, 0.0},
    {0.0, 1.0, 0.0},
    {1.0, 0.0, 0.0},
    {0.0, -1.0, 0.0},
    {0.0, 0.0, 1.0},
    {0.0, 0.0, -1.0}
  };
  static GLint faces[6][4] =
  {
    {0, 1, 2, 3},
    {3, 2, 6, 7},
    {7, 6, 5, 4},
    {4, 5, 1, 0},
    {5, 6, 2, 1},
    {7, 4, 0, 3}
  };
  GLfloat v[8][3];
  GLint i;

  v[0][0] = v[1][0] = v[2][0] = v[3][0] = -size / 2;
  v[4][0] = v[5][0] = v[6][0] = v[7][0] = size / 2;
  v[0][1] = v[1][1] = v[4][1] = v[5][1] = -size / 2;
  v[2][1] = v[3][1] = v[6][1] = v[7][1] = size / 2;
  v[0][2] = v[3][2] = v[4][2] = v[7][2] = -size / 2;
  v[1][2] = v[2][2] = v[5][2] = v[6][2] = size / 2;

	glBindTexture(GL_TEXTURE_2D, texBrick);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glColor3f(1.0f, 1.0f, 1.0f);

  for (i = 5; i >= 0; i--) {
    glBegin(type);
    glNormal3fv(&n[i][0]);
	glTexCoord2f(0.0f, 0.0f);
    glVertex3fv(&v[faces[i][0]][0]);
	glTexCoord2f(0.0f, 1.0f);
    glVertex3fv(&v[faces[i][1]][0]);
	glTexCoord2f(1.0f, 1.0f);
    glVertex3fv(&v[faces[i][2]][0]);
	glTexCoord2f(1.0f, 0.0f);
    glVertex3fv(&v[faces[i][3]][0]);
    glEnd();
  }
}

// complementing the above function
void glutSolidBrickCube(GLdouble size)
{
  drawBrickBox(size, GL_QUADS);
}

void drawBuilding() {

	glTranslatef(0.0f ,0.0f, 0.0f);
	glutSolidBrickCube(1.0f);

}

void computeDir(float deltaAngle) {
  
  angle += deltaAngle;
  if (angle > .02f)
    angle = .02f;
  if (angle < -.02f)
    angle = -.02f;
  
  lx = sin(angle);
  lz = -cos(angle);
}

void computePos(float deltaMoveX, float deltaMoveY) {

	x += deltaMoveX;
	y += deltaMoveY;

}

// move forward with a constant speed
void moveForward() {
	z -= 0.01f;
}


 //  //moveForward();
  
// 	if (deltaMoveX || deltaMoveY)
// 		computePos(deltaMoveX, deltaMoveY);

// 	if (deltaAngle)
// 		computeDir(deltaAngle);

// 	// Clear Color and Depth Buffers
// 	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

// 	// Reset transformations
// 	glLoadIdentity();
// 	// Set the camera
// 	gluLookAt(	x, y, z,
// 				x+lx, y+ly,  z+lz,
// 				0.0f, 1.0f,  0.0f);

// 	// set background
// 	glClearColor(0.53f, 0.8f, 0.98f, 1.0f);

// 	// Draw ground
// 	glColor3f(0.0f, 0.4f, 0.0f);
// 	glBegin(GL_QUADS);
// 		glVertex3f(-100.0f, 0.0f, -1000.0f);
// 		glVertex3f(-100.0f, 0.0f,  100.0f);
// 		glVertex3f( 100.0f, 0.0f,  100.0f);
// 		glVertex3f( 100.0f, 0.0f, -1000.0f);
// 	glEnd();

// 	// Draw Buildings
// 	for(int i=-30; i < 0; i++) {
// 		glPushMatrix();
// 		glTranslatef(-5.0,0.5,i * 10.0);
// 		drawBuilding();
// 		glPopMatrix();
// 		glPushMatrix();
// 		glTranslatef(-5.0,1.5,i * 10.0);
// 		drawBuilding();
// 		glPopMatrix();
// 	}
// 	for(int i=-30; i < 0; i++) {
// 		glPushMatrix();
// 		glTranslatef(5.0,0.5,i * 10.0);
// 		drawBuilding();
// 		glPopMatrix();
// 		glPushMatrix();
// 		glTranslatef(5.0,1.5,i * 10.0);
// 		drawBuilding();
// 		glPopMatrix();
// 	}

// 	glutSwapBuffers();
